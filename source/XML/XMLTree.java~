package XML;

import Config.Config;
import Config.FileManager;
import DTD.DTDTree;
import UI.UI;
import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

/**
 * Arbol de XML.
 */
public class XMLTree {
    static Document doc;
    static Element root;
    static String dtdName;
    private static String name;
    
    /**
     * Carga la interfaz del XML actual.
     * 
     * @param withDTD Si el XML tiene un DTD asociado o no.
     */
    public static void loadXML(boolean withDTD) {
        if(withDTD) DTDTree.createDTD(null);
        Config.readConfig();
        UIXMLTree.newExistentXML(withDTD, doc);
    }
    
    /**
     * Carga la interfaz de un XML vacío a partir de un DTD existente.
     * 
     * @param path Ruta del fichero DTD asociado en caso de existir.
     * @param name Nombre que tendrá el fichero XML al guardarse.
     */
    public static void newXML(String path, String name) {
        XMLTree.name = name;
        DTDTree.createDTD(path);
        Config.readConfig();
        UIXMLTree.newEmptyXML(DTDTree.getRoot());
    }
    
    /**
     * Lee un XML.
     * 
     * @param path Ruta del fichero en el que se encuentra el XML.
//     * @param lastType Última ventana visitada.
     */
    public static void readXML(String path) {
        if(path == null) return;
        String dtdPath;
        doc = FileManager.readXML(path);
        if(doc == null) return;

        String[] names = path.split("/");
        name = names[names.length-1].replace(".xml", "");
        
        // Se comprueba que el XML tenga un DTD asociado
        if(doc.getDoctype() == null) {
            UI.showMessageWindow();
            return;
        }
        // Se obtiene el path del DTD
        dtdPath = Config.pathAllDTD + doc.getDoctype().getName() + "/" + doc.getDoctype().getName() + ".dtd";
        
        // Se comprueba que el DTD existe
        File dtdFile =  new File(dtdPath);
        if(dtdFile.exists()) {
            DTDTree.createDTD(dtdPath);
            Config.setNewBaseDTD(doc.getDoctype().getName());
            Config.readConfig();

            UIXMLTree.newExistentXML(true, doc);
        } else UI.showMessageWindow();
    }
    
    /**
     * Elimina el árbol actual y asigna como raíz el elemento raíz del documento indicado.
     * 
     * @param doc Documento que contiene el nuevo árbol XML.
     */
    public static void setDocument(Document doc) {
        XMLTree.doc = doc;
        root = XMLTree.doc.getDocumentElement();
    }
    
    /**
     * Elimina el árbol actual y crea un nuevo elemento raíz con el nombre indicado.
     * 
     * @param name Nombre del nuevo elemento raíz del árbol.
     * @return Elemento raíz del árbol.
     */
    public static Element setRoot(String name) {
        if(doc == null) {
            try {
                doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
            } catch (Exception ex) {
                Logger.getLogger(XMLTree.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else if(doc.getDocumentElement() != null) {
            doc.removeChild(doc.getDocumentElement());
            root = null;
        }
        root = doc.createElement(name);
        doc.appendChild(root);
        
        return root;
    }

    /**
     * Devuelve el nodo raíz del árbol actual.
     * 
     * @return Raíz del árbol.
     */
    public static Element getRoot() {
        return root;
    }
    
    /**
     * Asocia un DTD al XML actual.
     * 
     * @param name Nombre del DTD.
     */
    public static void setDTD(String name) {
        dtdName = name;
        Logger.getLogger(XMLTree.class.getName()).log(Level.INFO, "Asignado al XML el DTD: " + name);
    }
    
    /**
     * Devuelve el nombre del DTD asociado al XML.
     * 
     * @return Nombre del DTD asociado al XML actual.
     */
    public static String getDTDName() {
        return dtdName;
    }
    
    /**
     * Añade un hijo al padre indicado.
     * 
     * @param parent Padre al que añadir un hijo.
     * @param name Nombre del hijo a añadir.
     * @param text Texto, en caso de existir, que contendrá el hijo a añadir.
     * @return Elemento hijo añadido.
     */
    public static Element addChild(Element parent, String name, String text) {
        Element elem = doc.createElement(name);
        if(text != null) elem.setTextContent(text);
        
        parent.appendChild(elem);
        return elem;
    }
    
    /**
     * Añade texto a un elemento.
     * 
     * @param elem Elemento al que añadir el texto.
     * @param text texto a añadir.
     */
    public static void setText(Element elem, String text) {
        if(text != null) elem.setTextContent(text);
    }
    
    /**
     * Elimina el hijo indicado del elemento padre indicado dentro del árbol en caso de existir ambos.
     * 
     * @param parent Elemento al que se le eliminará un hijo.
     * @param child Elemento a eliminar.
     */
    public static void removeChild(Element parent, Element child) {
        parent.removeChild(child);
    }
    
    /**
     * Guarda el XMl actual en el fichero con la ruta indicada.
     * 
     * @param path Ruta donde se guardará el XML.
     * @param withDTD Si se va a añadir el DTD o no.
     */
    public static void saveXML(String path, boolean withDTD) {
        FileManager.saveXML(path, doc, dtdName, withDTD);
    } 

    /**
     * @return El nombre del XML.
     */
    public static String getName() {
        return name;
    }
}